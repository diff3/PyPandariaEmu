import struct

"""CMSG_AUTH_SESSION Parser"""


class BitReader:
    """Class to read bits from a byte array."""
    def __init__(self, data):
        self.data = data
        self.byte_pos = 0
        self.bit_pos = 0
        self.cur_byte = self.data[self.byte_pos]

    def read_bit(self):
        """Reads a single bit from the byte array."""
        bit = (self.cur_byte >> (7 - self.bit_pos)) & 1
        self.bit_pos += 1

        if self.bit_pos > 7:  # Move to the next byte
            self.bit_pos = 0
            self.byte_pos += 1
            if self.byte_pos < len(self.data):
                self.cur_byte = self.data[self.byte_pos]

        return bit

    def read_bits(self, num_bits):
        """Reads multiple bits from the byte array."""
        value = 0
        for _ in range(num_bits):
            bit = self.read_bit()
            value = (value << 1) | bit
        return value


def parse_raw_data(raw_data):
    """
    Parses raw binary data to extract session information.

    Args:
        raw_data (bytes): The raw packet data.

    Returns:
        None
    """
    # Initialize digest and extract values
    digest = [0] * 20
    digest[18] = f"{raw_data[10]:02X}"
    digest[14] = f"{raw_data[11]:02X}"
    digest[3] = f"{raw_data[12]:02X}"
    digest[4] = f"{raw_data[13]:02X}"
    digest[0] = f"{raw_data[14]:02X}"
    virtual_realm_id = int.from_bytes(raw_data[15:19], byteorder='little')
    digest[11] = f"{raw_data[19]:02X}"
    client_seed = int.from_bytes(raw_data[20:24], byteorder='little')
    digest[19] = f"{raw_data[24]:02X}"

    # Skip uint8 x2
    digest[2] = f"{raw_data[27]:02X}"
    digest[9] = f"{raw_data[28]:02X}"
    digest[12] = f"{raw_data[29]:02X}"

    # Skip uint64 and uint32
    digest[16] = f"{raw_data[42]:02X}"
    digest[5] = f"{raw_data[43]:02X}"
    digest[6] = f"{raw_data[44]:02X}"
    digest[8] = f"{raw_data[45]:02X}"
    client_build = int.from_bytes(raw_data[46:48], byteorder='little')
    digest[17] = f"{raw_data[48]:02X}"
    digest[7] = f"{raw_data[49]:02X}"
    digest[13] = f"{raw_data[50]:02X}"
    digest[15] = f"{raw_data[51]:02X}"
    digest[1] = f"{raw_data[52]:02X}"
    digest[10] = f"{raw_data[53]:02X}"

    # Extract addon size and data
    addon_size = int.from_bytes(raw_data[54:58], byteorder='little')
    addon_data_start = 58
    addon_data_end = addon_data_start + addon_size
    addon_data = raw_data[addon_data_start:addon_data_end]

    # Remaining data after addonData
    remaining_data = raw_data[addon_data_end:]

    # Extract account name length and account name
    bit_reader = BitReader(remaining_data)
    bit_reader.read_bit()  # Skip the first flag bit
    account_name_length = bit_reader.read_bits(11)
    account_name = remaining_data[2:2 + account_name_length].decode('utf-8')

    # Print debug information
    print("Debug Log for Auth Session:")
    print(f"VirtualRealmID: {virtual_realm_id}")
    print(f"ClientSeed: {client_seed}")
    print(f"ClientBuild: {client_build}")
    print(f"Digest: {digest}")
    print(f"Addon size: {addon_size}")
    print(f"Name length: {account_name_length}")
    print(f"Account: {account_name}")


# Test the parser with raw data
# raw_data = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa4\xc8\xc3\xf6\xc9\x01\x00\x00\x00\xd7\xf0\x01\x11\x9cO\x01\x009G\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xbc\xd0\xff\x7f\xeeG9W\xe6\xd1\xe3\xa8`\x02\x00\x000\x05\x00\x00x\x9cu\xd3=h\x14A\x14\x07\xf0;D\xf1\x03\xd3X\x05\x03*b#by\x9d\xc2\xdd\x99\x0b\x91;\xbc\xdc\xde\x9d\x08\x11}7\xfb\xb2;\xee\xec\xccfn\xf6L\xd2\xd9Y\xd9H@\x1b-D0\x85\x12H.\x16\x8a\x82\x98\xc2F\x8d\xf8\xd9(\x04;\x0b!\xd8D\x10\xdcs\xb3\xb3\xbb\xb2i\xf7\xf7\x9f\x99}o\xde\x9c\xc8\xe5r%F\xe7\xe6@\x9a\x97\x8a\xc4\xa6\xd8C\x17\xb9j\x8d\xe7\xf2\xee\xd5\x91j.\xe5\x92\xd8\x80\x82\tkv\x1bG\x0e\xd9\xe2\x13E\x05\xcf\xb4\x12\xc8\x0e\xca\xae-\xbcmX)\x86S\x14\x99Y\xa3\x9c\xba\xe0\x85\xa1\x0f7\x16\xef\xc6!\xcaM\xca\xadh\x03\xe3\xd1\xd3vl\x0c\x88S\x03\xe9\xa0\xae\xaa\xb4\xfe~H{\x19\x18r\x13dH\x0b\xbb\xf6\x90\x98l`\x01Z\xd8\x8dV\xe6\'\xc9p\xcc\x8c\x06\xad2\xa0\x87f\x1b$\x85\x0e\xc3n\x18\xbb\xb6\x7fy-\x8e\t\xb7\x03\xaa*\xac\xd06\x0e/\xce\xffgM\x9cQ!\xee{3t0\x89\x1e\x10\xd5\x00jV$\xb8\xd1\xe6\xa9\xf6\x94[\x95\xba\x14ST\x1f}n2\xffC\xeb\x19\xec\xf8VS\x08\xb6\x85+K\xcfQ\xe3(\'\xc2\xe7\n\xe5Y\xe1K\x0e,\x8cl\xfe|6\xad#cl\xd6\xb3\xa3\xda+\xd7\xadF,\xb5\xa09\xba\xa1{o\xba\x7f\x12d\xf8\xb2\x87zFR\x05\x8f\xf9\x94\x99%\xe0N\xa4\x07\xce\xe7~\xa7\xb5,\xb8\x92\x82eN\xc3\xbf@$\xaf\'\xfa\xabZ\xc6y\xd7C\xa2\xff\xe8\xf4\x15w#6\x85n\x91\x05\x95Br\no\xbd\xfa\xf21\x151\x04\t\x86$1G\x9f\xe6?\xbfH%Z\x9e%\xc1\xc4\xc8\x0f\xf5W6\xb5W\x85p\x82\xb5\x15!S?\xf9\xbdx\xf9\xb8\xce\xd4\x80H\x91\xd9\xb4\x9a\xe8a\x1d\xccP\xde\xdd\xdb=\xa3\xa5\x8e*|\x03\xd1\xba\xe2\xfdo\xfd\xa4\xa6\xae\xef\xc2\xa9\xb5\xa6\xc6\xc1\xe4dV\xdb\xc0)!\xadD\xa5;\x0boG\xb56\x07/BwRN[\x17c\xa2.\xd6\x80\x83\x85[\xef\xa5\xffk\xf9k\xac\xc2A\xdd\xde\xa3/\x97\x16b\x19\xb4\xcdp(\xd3\xd7z\xaco?H2\xe5(#+\xac\xdb\x0f\xb5\xb5\x055\r%dpf\xe4\xa9"\xeb\xedz\xf4}\xf5\xce\x93#\xfa\xfb\x84\x8f]U\xb6\x05%\x981i\x83\x1d\xf5~\xa9~\x17}e\xeb\x87?H\xdc\xde\xf1\xb80\x18\xc2\xe1\x93#\xf5\xbf\xcd<\xdep\x00@MAPE'
raw_data = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00Z\x97\xe9\xc7\x7f\x01\x00\x00\x00\xa4\x18(\xe4c\xdf\x01\x00\xfb5[\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa6\xf0%\x15\xeeG\xbc\x1eU\x86\x0c&`\x02\x00\x000\x05\x00\x00x\x9cu\xd3=h\x14A\x14\x07\xf0;D\xf1\x03\xd3X\x05\x03*b#by\x9d\xc2\xdd\x99\x0b\x91;\xbc\xdc\xde\x9d\x08\x11}7\xfb\xb2;\xee\xec\xccfn\xf6L\xd2\xd9Y\xd9H@\x1b-D0\x85\x12H.\x16\x8a\x82\x98\xc2F\x8d\xf8\xd9(\x04;\x0b!\xd8D\x10\xdcs\xb3\xb3\xbb\xb2i\xf7\xf7\x9f\x99}o\xde\x9c\xc8\xe5r%F\xe7\xe6@\x9a\x97\x8a\xc4\xa6\xd8C\x17\xb9j\x8d\xe7\xf2\xee\xd5\x91j.\xe5\x92\xd8\x80\x82\tkv\x1bG\x0e\xd9\xe2\x13E\x05\xcf\xb4\x12\xc8\x0e\xca\xae-\xbcmX)\x86S\x14\x99Y\xa3\x9c\xba\xe0\x85\xa1\x0f7\x16\xef\xc6!\xcaM\xca\xadh\x03\xe3\xd1\xd3vl\x0c\x88S\x03\xe9\xa0\xae\xaa\xb4\xfe~H{\x19\x18r\x13dH\x0b\xbb\xf6\x90\x98l`\x01Z\xd8\x8dV\xe6\'\xc9p\xcc\x8c\x06\xad2\xa0\x87f\x1b$\x85\x0e\xc3n\x18\xbb\xb6\x7fy-\x8e\t\xb7\x03\xaa*\xac\xd06\x0e/\xce\xffgM\x9cQ!\xee{3t0\x89\x1e\x10\xd5\x00jV$\xb8\xd1\xe6\xa9\xf6\x94[\x95\xba\x14ST\x1f}n2\xffC\xeb\x19\xec\xf8VS\x08\xb6\x85+K\xcfQ\xe3(\'\xc2\xe7\n\xe5Y\xe1K\x0e,\x8cl\xfe|6\xad#cl\xd6\xb3\xa3\xda+\xd7\xadF,\xb5\xa09\xba\xa1{o\xba\x7f\x12d\xf8\xb2\x87zFR\x05\x8f\xf9\x94\x99%\xe0N\xa4\x07\xce\xe7~\xa7\xb5,\xb8\x92\x82eN\xc3\xbf@$\xaf\'\xfa\xabZ\xc6y\xd7C\xa2\xff\xe8\xf4\x15w#6\x85n\x91\x05\x95Br\no\xbd\xfa\xf21\x151\x04\t\x86$1G\x9f\xe6?\xbfH%Z\x9e%\xc1\xc4\xc8\x0f\xf5W6\xb5W\x85p\x82\xb5\x15!S?\xf9\xbdx\xf9\xb8\xce\xd4\x80H\x91\xd9\xb4\x9a\xe8a\x1d\xccP\xde\xdd\xdb=\xa3\xa5\x8e*|\x03\xd1\xba\xe2\xfdo\xfd\xa4\xa6\xae\xef\xc2\xa9\xb5\xa6\xc6\xc1\xe4dV\xdb\xc0)!\xadD\xa5;\x0boG\xb56\x07/BwRN[\x17c\xa2.\xd6\x80\x83\x85[\xef\xa5\xffk\xf9k\xac\xc2A\xdd\xde\xa3/\x97\x16b\x19\xb4\xcdp(\xd3\xd7z\xaco?H2\xe5(#+\xac\xdb\x0f\xb5\xb5\x055\r%dpf\xe4\xa9"\xeb\xedz\xf4}\xf5\xce\x93#\xfa\xfb\x84\x8f]U\xb6\x05%\x981i\x83\x1d\xf5~\xa9~\x17}e\xeb\x87?H\xdc\xde\xf1\xb80\x18\xc2\xe1\x93#\xf5\xbf\xcd<\xdep\x00PADMIN'
raw_data = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\xf6\x03zR\x01\x00\x00\x00yeJ\xd11\xd6\x01\x00@\xc9\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe8]5f\xeeG\xd4\xe9\x0c&]\xcd{\x01\x00\x000\x05\x00\x00x\x9cu\x93QN\xc30\x0c\x86\x8b8\x05\x12G@<\xf2\xbe\r6\r\xadRY\xbb\xbd"/\xf1Z\xabi\\\xb9i\xc5v\x13N\xc2\xf5H\x85\x84@r^\xf3\xfdv\xe2?\xbf\x1f\xb2,[:\xba^A\xec\xfb\xc24\x84\x13v\xe8\xc3a\x9b\xdd|\xde~=e\xff\xb8\x98\x06\x90\x1d\xd7\x97\x04G\x0f:\x19M \xf6*[\x82\x9cP\x86\x86\xfb\x04\x0e\xc1\xe1\x99\xd0\xd9\x9c<u\xd0k"\xf2\x96|\xad7p`\xda\x1c\xa4E}\xaa\x158\xf4\x16DC\r\xb8\x08k\x1c\xf4JG\xd1\xaa\x12&\xb4G\x10\x82\x93\xc3A\x93qw\x82\xb0\xe3:\xc9*\xfc\x08:\xec\xc1\x84=\x90]\x0btz\xf3\xc3\xba\x10>\x93~\xf53\x9e\xc6\xbabv\x1a|\xf1\x86G\x1fP^y\x14\x0fN\x91l\xdc\xa5o\xd4\xd97y4G7t\x93\x97\xa3L\xa8gd3\x92\xb3K\xf0m\x9a\xae\xd8\x07a\x97\x16\xa8d\xeb\x87\x1e\x8d\xfe\xa2m\xc0n\xe1\xe2\xa4\x90L\xe1,)\xd9\xc4\x90\xa4r4+\x0e}-`Q\xe5;\xe66\xd6\xaeY\xd2\x8f\xcc\xc1\x08\xeb\x84\',\xc0*\xa4\xc0\xf0\xb3\x03j]\xa4\xe9\xef\x9b\x93\xa3V\xed\xf1\xccR\xa7&\xad\xe6\x8d\xd0\x9d\xac\xa8\xc3\x1c<\xd4\xa8\xedK\xc5-\xea\xf6V\xb3meKN\xff\xd6\x88\xc9\xa3\xa8\xec\xc8d\xcb\xc0\x12\xef\xd4\x1d8\x16\xea\xf9\xdb\x88CX5L\x06\x15:w\xd4\xfb-\xc6\xd0\xfc.\xfe_\xc5\xdd\xe3}\xf1\r\xe0n\x9d\xf7\x00@MAPE'


parse_raw_data(raw_data)